#!/usr/bin/env node
import { readFileSync } from 'node:fs';
import { join } from 'node:path';

function parseMilestones(content) {
  const regex = /^###\s+(–ú–∞–π–ª—Å—Ç–æ—É–Ω\s+\d+[^\n]*)\n([\s\S]*?)(?=^###\s+–ú–∞–π–ª—Å—Ç–æ—É–Ω|\Z)/gm;
  const milestones = [];

  let match;
  while ((match = regex.exec(content)) !== null) {
    const heading = match[1].trim();
    const body = match[2];

    const numberMatch = heading.match(/–ú–∞–π–ª—Å—Ç–æ—É–Ω\s+(\d+)/);
    const index = numberMatch ? Number(numberMatch[1]) : Number.POSITIVE_INFINITY;

    const statusMatches = Array.from(body.matchAll(/–°—Ç–∞—Ç—É—Å:\s*([^\n]+)/g)).map(([, statusText]) => statusText);
    const hasOpenStatuses = statusMatches.some((text) => /‚è≥|üöß/.test(text));
    const hasCompletedStatuses = statusMatches.some((text) => /‚úÖ/.test(text));
    const headingHasCompletion = /‚úÖ/.test(heading) || /–∑–∞–≤–µ—Ä—à[–µ—ë]–Ω/i.test(heading);

    const hasAnyCompletionMark = hasCompletedStatuses || headingHasCompletion;
    const isFullyDone = hasAnyCompletionMark && !hasOpenStatuses;

    milestones.push({
      name: heading,
      index,
      hasOpenStatuses,
      isFullyDone,
      hasAnyCompletionMark,
    });
  }

  return milestones;
}

function main() {
  const filePath = join(process.cwd(), 'RoadMap.md');
  let content;

  try {
    content = readFileSync(filePath, 'utf8');
  } catch (error) {
    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å ${filePath}:`, error);
    process.exitCode = 1;
    return;
  }

  const milestones = parseMilestones(content);
  if (milestones.length === 0) {
    console.warn('–í RoadMap.md –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞–π–ª—Å—Ç–æ—É–Ω–∞.');
    return;
  }

  const currentIndex = milestones.findIndex((milestone) => milestone.hasOpenStatuses);
  if (currentIndex === -1) {
    return;
  }

  const current = milestones[currentIndex];
  const next = milestones[currentIndex + 1];

  if (!next) {
    return;
  }

  if (next.isFullyDone) {
    console.error(
      [
        '–ù–∞—Ä—É—à–µ–Ω–∏–µ gate-—á–µ–∫–∞ –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã:',
        `- –¢–µ–∫—É—â–∏–π –º–∞–π–ª—Å—Ç–æ—É–Ω ¬´${current.name}¬ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ç—É—Å—ã ‚è≥/üöß.`,
        `- –°–ª–µ–¥—É—é—â–∏–π –º–∞–π–ª—Å—Ç–æ—É–Ω ¬´${next.name}¬ª –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω (‚úÖ).`,
        '–ó–∞–∫—Ä–æ–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —à–∞–≥–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–∞–π–ª—Å—Ç–æ—É–Ω–∞ –∏–ª–∏ –ø–µ—Ä–µ–æ—Ç–∫—Ä–æ–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º.',
      ].join('\n'),
    );
    process.exitCode = 1;
  }
}

main();
